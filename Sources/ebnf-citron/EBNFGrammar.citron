%class_name EBNFParser

%preface {
  import CitronParserModule
  import CitronLexerModule

  extension _CitronParserUnexpectedTokenError
    : CustomDebugStringConvertible
  {
    public var debugDescription: String {
      "UnexpectedToken(token: \(token), tokenCode: \(tokenCode))"
    }
  }
}

%nonterminal_type grammar {EBNF.RuleList}
%nonterminal_type rule_list {EBNF.RuleList}
%nonterminal_type rule {EBNF.Rule}
%nonterminal_type alt_list {EBNF.AltList}
%nonterminal_type alt {EBNF.Alt}
%nonterminal_type term_list {EBNF.TermList}
%nonterminal_type term {EBNF.Term}

%start_symbol grammar

%token UNRECOGNIZED_CHARACTER.
%token_type Token

%preface {
  import CitronParserModule
    extension Array {
    func appending(_ e: Element) -> Array {
      var r = self
      r.append(e)
      return r
    }
  }
}

%left_associative OR.
%left_associative STAR PLUS QUESTION.
%right_associative IS_DEFINED_AS.

grammar ::= rule_list(l). {l}
rule_list ::= . {[]}
rule_list ::= rule_list(l) rule(r). {l.appending(r)}

rule ::= LHS(l) IS_DEFINED_AS alt_list(r). { .init(lhs: l, rhs: r)}

alt_list ::= alt(a). {[a]}
alt_list ::= alt_list(l) OR alt(r). {l.appending(r)}

alt ::= term_list(t). {t}
alt ::= . {[]}
term_list ::= term(t). {[t]}
term_list ::= term_list(l) term(r). {l.appending(r)}
term ::= LPAREN alt_list(g) RPAREN. {.group(g)}
term ::= SYMBOL(s). {.symbol(s)}
term ::= LITERAL(l). {
  .literal(
     l.text.dropFirst().dropLast().split(separator: "\\").joined(), 
     position: l.position)
}

%token_set quantifier STAR PLUS QUESTION.
term ::= term(t) quantifier(q). {
  .quantified(t, q.text.first!, position: t.position...q.position)
}
